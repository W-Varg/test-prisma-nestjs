/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUnidadArgs } from "./CreateUnidadArgs";
import { UpdateUnidadArgs } from "./UpdateUnidadArgs";
import { DeleteUnidadArgs } from "./DeleteUnidadArgs";
import { UnidadFindManyArgs } from "./UnidadFindManyArgs";
import { UnidadFindUniqueArgs } from "./UnidadFindUniqueArgs";
import { Unidad } from "./Unidad";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { User } from "../../user/base/User";
import { UnidadService } from "../unidad.service";

@graphql.Resolver(() => Unidad)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UnidadResolverBase {
  constructor(
    protected readonly service: UnidadService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Unidad",
    action: "read",
    possession: "any",
  })
  async _unidadsMeta(
    @graphql.Args() args: UnidadFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Unidad])
  @nestAccessControl.UseRoles({
    resource: "Unidad",
    action: "read",
    possession: "any",
  })
  async unidads(@graphql.Args() args: UnidadFindManyArgs): Promise<Unidad[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Unidad, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Unidad",
    action: "read",
    possession: "own",
  })
  async unidad(
    @graphql.Args() args: UnidadFindUniqueArgs
  ): Promise<Unidad | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Unidad)
  @nestAccessControl.UseRoles({
    resource: "Unidad",
    action: "create",
    possession: "any",
  })
  async createUnidad(@graphql.Args() args: CreateUnidadArgs): Promise<Unidad> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        owner: args.data.owner
          ? {
              connect: args.data.owner,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Unidad)
  @nestAccessControl.UseRoles({
    resource: "Unidad",
    action: "update",
    possession: "any",
  })
  async updateUnidad(
    @graphql.Args() args: UpdateUnidadArgs
  ): Promise<Unidad | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          owner: args.data.owner
            ? {
                connect: args.data.owner,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Unidad)
  @nestAccessControl.UseRoles({
    resource: "Unidad",
    action: "delete",
    possession: "any",
  })
  async deleteUnidad(
    @graphql.Args() args: DeleteUnidadArgs
  ): Promise<Unidad | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Task])
  @nestAccessControl.UseRoles({
    resource: "Task",
    action: "read",
    possession: "any",
  })
  async tasks(
    @graphql.Parent() parent: Unidad,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findTasks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async owner(@graphql.Parent() parent: Unidad): Promise<User | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
